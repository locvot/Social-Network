openapi: 3.0.3
info:
  title: Social Network API
  description: |-
    This is the backend server of a Social Network, providing RESTful APIs for core functionalities.
    The server includes user authentication, tweet creation, following/unfollowing, commenting, liking, video streaming and real-time chat using WebSockets.
    You can interact with the API to simulate a fully functional social networking platform.

    Some useful links:
    - [GitHub Repository](https://github.com/locvot/Social-Network)
    - [API Documentation](https://github.com/locvot/Social-Network/tree/swagger-setup)
    
  termsOfService: https://github.com/locvot/Social-Network#terms-of-service
  contact:
    email: your-email@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
tags:
  - name: users
    description: API about users
  - name: tweets
    description: API about tweets
  - name: media
    description: API about media
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register
      description: Register to twitter
      operationId: register
      requestBody:
        description: Email, password, name
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register success
                  result:
                    $ref: 'components.yaml#/components/schemas/SuccessAuthenication'
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: Login to twitter
      operationId: login
      requestBody:
        description: Email, password
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: 'components.yaml#/components/schemas/SuccessAuthenication'
  /users/logout:
    post:
      tags:
        - users
      summary: Logout
      description: Logout to twitter
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRhNGZiNmYxNmYxNmViZTBlYTFhZmVlIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTIxMDY1MzksImV4cCI6MTY5NDY5ODUzOX0.9Z_C51hbQ79FJgUIgeageUhbwWTlP5OQGENyH1EaTfY
        required: true
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout success
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refresh token
      description: Refresh token
      operationId: refreshToken
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRhNGZiNmYxNmYxNmViZTBlYTFhZmVlIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTIxMDY1MzksImV4cCI6MTY5NDY5ODUzOX0.9Z_C51hbQ79FJgUIgeageUhbwWTlP5OQGENyH1EaTfY
        required: true
      responses:
        '200':
          description: Refresh token success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token success
                  result:
                    $ref: 'components.yaml#/components/schemas/SuccessAuthenication'
  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify email
      description: Verify email
      operationId: verifyEmail
      requestBody:
        description: email_verify_token
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRhNGZiNmYxNmYxNmViZTBlYTFhZmVlIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTIxMDY1MzksImV4cCI6MTY5NDY5ODUzOX0.9Z_C51hbQ79FJgUIgeageUhbwWTlP5OQGENyH1EaTfY
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Forgot password
      description: Forgot password
      operationId: forgotPassword
      requestBody:
        description: email
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test13@gmail.com
        required: true
      responses:
        '200':
          description: Check email to reset password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Check email to reset password
  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset password
      description: Reset password
      operationId: resetPassword
      requestBody:
        description: forgot_password_token, password, confirm_password
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRhNGZiNmYxNmYxNmViZTBlYTFhZmVlIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTIxMDY1MzksImV4cCI6MTY5NDY5ODUzOX0.9Z_C51hbQ79FJgUIgeageUhbwWTlP5OQGENyH1EaTfY
                password:
                  type: string
                  example: Test123!
                confirm_password:
                  type: string
                  example: Test123!
        required: true
      responses:
        '200':
          description: Reset password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset password successfully
  /users/me:
    get:
      tags:
            - users
      summary: Get profile
      description: Get profile user
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Get user profile successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get me success
                  result:
                    $ref: 'components.yaml#/components/schemas/User'
  /users/patch:
    patch:
      tags:
        - users
      summary: Update profile
      description: Update profile user
      operationId: updateMe
      security:
        - BearerAuth: []
      requestBody:
        description: Name, date_of_birth. bio, location, website, username, avatar, cover_photo
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                date_of_birth:
                  type: string
                  format: ISO8601
                  example: 2023-06-08T10:17:31.096Z
                bio:
                  type: string
                  example: 'This is my bio.'
                location:
                  type: string
                  example: 'San Francisco, CA'
                website:
                  type: string
                  example: 'www.example.com'
                username:
                  type: string
                  example: 'johndoe'
                avatar:
                  type: string
                  example: 'http:localhost:4000/images/avatars/johndoe.jpg'
                cover_photo:
                  type: string
                  example: 'http:localhost:4000/images/avatars/johndoe.jpg'
        required: true
      responses:
        '200':
          description: Update profile successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update profile successfully
                  result:
                    $ref: 'components.yaml#/components/schemas/User'
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user profile
      description: Get user profile
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: MongoId
            example: 64be0ad2e43d2464394feedb
      responses:
        default:
          description: Get user profile successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get user profile successfully
                  result:
                    $ref: 'components.yaml#/components/schemas/UserPublic'
  /users/follow:
    post:
      tags:
        - users
      summary: Follow user
      description: Follow user
      operationId: followUser
      security:
        - BearerAuth: []
      requestBody:
        description: User id
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: MongoId
                  example: 64be0ad2e43d2464394feedb
        required: true
      responses:
        '200':
          description: Follow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Follow successfully
  /users/follow/{usersId}:
    delete:
      tags:
        - users
      summary: Unfollow user
      description: Unfollow user
      operationId: unfollowUser
      security:
        - BearerAuth: []
      parameters:
        - name: usersId
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: MongoId
            example: 64be0ad2e43d2464394feedb
      responses:
        '200':
          description: Unfollow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unfollow successfully
  /users/change-password:
    put:
      tags:
        - users
      summary: Change password
      description: Change password
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        description: old_password, password, confirm_password
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: Test123!
                new_password:
                  type: string
                  example: Test1234!
                confirm_password:
                  type: string
                  example: Test1234!
        required: true
      responses:
        '200':
          description: Change password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Change password successfully
  /tweets:
    post:
      tags:
        - tweets
      summary: Create tweet
      description: Create tweet
      operationId: createTweet
      security:
        - BearerAuth: []
      requestBody:
        description: Tweet content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: 'This is my first tweet.'
                  minLength: 1
                  maxLength: 280
              required:
                - content
      responses:
        '200':
          description: Create tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create tweet successfully
                  result:
                    $ref: 'components.yaml#/components/schemas/Tweet'
    get:
      tags:
        - tweets
      summary: Get tweets
      description: Get tweets
      operationId: getTweets
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Limit number
          required: false
          schema:
            type: integer
            example: 10
      responses:
        default:
          description: Get tweets successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get tweets successfully
                  result:
                    type: array
                    items:
                      $ref: 'components.yaml#/components/schemas/Tweet'
  /tweets/{tweet_id}:
    get:
      tags:
        - tweets
      summary: Get tweet
      description: Get tweet
      operationId: getTweet
      parameters:
        - name: tweet_id
          in: path
          description: Tweet id
          required: true
          schema:
            type: string
            format: MongoId
            example: 65b8fa...df23
      responses:
        default:
          description: Get tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get tweet successfully
                  result:
                    $ref: 'components.yaml#/components/schemas/Tweet'
  /upload-image:
    post:
      tags:
        - media
      summary: Upload image
      description: Upload image
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        description: Image
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload image successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload image successfully
                  result:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'http://localhost:4000/images/avatars/johndoe.jpg'
  /upload-video:
    post:
      tags:
        - media
      summary: Upload video
      description: Upload video
      operationId: uploadVideo
      security:
        - BearerAuth: []
      requestBody:
        description: Video
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload video successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload video successfully
                  result:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'http://localhost:4000/videos/avatars/johndoe.mp4'
  /video-status/{video-id}:
    get:
      tags:
        - media
      summary: Get video status
      description: Get video status
      operationId: getVideoStatus
      parameters:
        - name: video-id
          in: path
          description: Video id
          required: true
          schema:
            type: string
            format: MongoId
            example: 64be0ad2e43d2464394feedb
      responses:
        default:
          description: Get video status successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get video status successfully
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        example: 'processing'
                      url:
                        type: string
                        example: 'http://localhost:4000/videos/avatars/johndoe.mp4'
